<?php
namespace App\Controller;
use App\Auth\AESPasswordHasher;
use App\Controller\AppController;
use App\Model\Entity\MdlUser;
use Cake\Event\Event;
use Carrinho\Model\Entity\EcmCarrinho;

/**
 * MdlUser Controller
 *
 * @property \App\Model\Table\MdlUserTable $MdlUser */
class MdlUserController extends AppController
{
    public function initialize()
    {
        parent::initialize();

        $this->loadComponent('CookieOverride');
    }
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Auth->allow(['logout', 'login']);
    }

    public function login()
    {
        $this->setCookieData();

        if ($this->request->is('post') ||
            (!is_null($this->request->data('username')) && !is_null($this->request->data('password')))) {

            $user = $this->Auth->identify();

            $msg = __('Usuário ou senha inválido, tente novamente');
            if ($user && $user['confirmed']) {
                $this->criarCookie($user);

                $this->loadModel('EcmPermissao');
                $this->loadModel('EcmGrupoPermissao');

                $acessoTotal = $this->EcmGrupoPermissao->verificarAcessoTotalUsuario($user['id']);

                if($acessoTotal == 0) {
                    $permissoes = $this->EcmPermissao->buscarPermissoesUsuario($user['id']);
                    $user['permissoes'] = $permissoes;
                }else{
                    $user['permissoes'] = ['acesso_total' => true];
                }

                $user['token'] = parent::createToken($user['id'], $user['username'], true);

                $this->Auth->setUser($user);
                return $this->redirect($this->Auth->redirectUrl());
            } else if ($user) {
                $msg = __('Favor, confirme seu usuário para utilizar nossa plataforma');
            }
            $this->logout();
            $this->Flash->error($msg);
        }
    }

    public function logout()
    {
        $ecmCarrinho = $this->request->session()->read('carrinho');

        if(!is_null($ecmCarrinho)){
            if(!is_null($ecmCarrinho->id)) {
                $this->loadModel('Carrinho.EcmCarrinho');
                $ecmCarrinho->set('status', EcmCarrinho::STATUS_CANCELADO);
                $this->EcmCarrinho->save($ecmCarrinho);
            }

            $this->request->session()->destroy();
        }
        return $this->redirect($this->Auth->logout());
    }

    public function listaUsuarioJson(){

        if($this->request->is('ajax')) {
            $this->autoRender = false;

            $nome = $this->request->data['nome'];
            $notId = $this->request->data('not-id');
            $notId = is_null($notId)? null : json_decode($notId);

            $usuarios = $this->MdlUser->find('all',['fields'=>['MdlUser.id', 'MdlUser.firstname', 'MdlUser.lastname', 'MdlUser.idnumber']])
                ->contain([ 'MdlUserDados'])
                ->limit(300);

            if(!is_null($nome)){
                $nomes = MdlUser::separarNomeSobrenome($nome);

                $conditions['idnumber'] = $nome;
                $conditions['email LIKE'] = '%'.$nome.'%';
                $conditions['MdlUserDados.numero LIKE']  = '%'.$nome.'%';
                $conditions['MdlUser.firstname LIKE'] = '%'.$nomes['firstname'].'%';
                if($nomes['lastname'])
                $conditions['MdlUser.lastname LIKE'] = '%'.$nomes['lastname'].'%';

                if(strlen(trim($nome)) > 3){
                    $usuarios->where(['OR' => $conditions]);
                }

                if(!is_null($notId) && !empty($notId)){
                    $usuarios->where(['MdlUser.id not in' => $notId]);
                }

                $usuarios = $usuarios->toArray();
                echo json_encode($usuarios);

            }
        }
    }

    public function importarUsuario(){
        $chave = $this->request->query('chave');

        $this->autoRender = false;
        $this->RequestHandler->renderAs($this, 'json');
        $this->response->type('application/json');
        $returno = ['sucesso' => false];

        if(!is_null($chave) && !empty($chave)){
           if($this->request->is('ajax')) {
                $this->loadComponent('BaseExterna');
                $this->autoRender = false;
                if($this->BaseExterna->checkUser($chave)){
                    if($this->BaseExterna->importarUsuario($chave)){
                        $returno['sucesso'] = true;
                    }
                }
           }
        }

        echo json_encode($returno);
        die;
    }

    public function editUsuarioAltoqi(){
        $this->loadComponent('BaseExterna');

        $chave = (array_key_exists('chave', $this->request->data)) ? $this->request->data['chave'] : false;
        $cpf =   (array_key_exists('cpf', $this->request->data)) ? $this->request->data['cpf'] : false;
        $email =  (array_key_exists('email', $this->request->data)) ? $this->request->data['email'] : false;

        $this->autoRender = false;
        $this->RequestHandler->renderAs($this, 'json');
        $this->response->type('application/json');
        $returno = ['sucesso' => false];

        if(!is_null($chave) && !empty($chave)){
           if($this->request->is('ajax')) {
                if($this->BaseExterna->checkUser($chave)){
                    if($this->BaseExterna->editUsuario($chave, $cpf, $email)){
                        $returno['sucesso'] = true;
                    }
                }
           }
        }

        echo json_encode($returno);
        die;
    }

    public function listarUsuario(){
        $this->loadComponent('BaseExterna');
        $this->loadModel('Configuracao.EcmConfig');

        $conditions = [];
        $data = $this->request->data;

        $nome = array_key_exists('nome', $data) ? $data['nome'] : '';
        $chave = array_key_exists('idnumber', $data) ? $data['idnumber'] : '';
        $cpf = array_key_exists('cpf', $data) ? $data['cpf'] : '';
        $email = array_key_exists('email', $data) ? $data['email'] : '';
        $filter = array_key_exists('filter', $data) ? $data['filter'] : '';
        $clients = array_key_exists('list', $data)  ? $data['list'] : '';
        $userAltoQiLista = array_key_exists('altoqi', $data) ? $data['altoqi'] : '';
        $limit =  (!empty($this->request->query('limit'))) ? $this->request->query('limit') : '' ;

        $moodle = $this->EcmConfig->find()->where(['nome' => 'dominio_acesso_moodle'])->first()->valor;
        $moodle = 'https://'.$moodle;
        $contaAzul = MdlUser::verificarPermissao('exportClients', $this->request->controller, $this->request->plugin, $this->request->session()->read('Auth.User.permissoes'));

        if(!empty($filter) && !empty($clients)){
            $clients = explode(',', $clients);

            if($filter == 0)
                $conditions['email in'] = $clients;
            else if($filter == 1)
                $conditions['MdlUserDados.numero in '] = $clients;
            else if($filter == 2)
                $conditions['idnumber in '] = $clients;
        }else{

            if(strlen(trim($chave)) > 0)
                $conditions['MdlUser.idnumber'] = $chave;

            if(strlen(trim($email)) > 0)
                $conditions['MdlUser.email LIKE'] = '%'.$email.'%';

            if(strlen(trim($cpf)) > 0)
                $conditions['MdlUserDados.numero'] = $cpf;

            if(strlen(trim($nome)) > 0){
                $aux = MdlUser::separarNomeSobrenome($nome);
                $firstname = $aux['firstname'];
                $lastname = $aux['lastname'];

                if(!empty($firstname))
                    $conditions['AND']['MdlUser.firstname LIKE '] = '%'.$firstname.'%';

                if(!empty($lastname))
                    $conditions['AND']['MdlUser.lastname LIKE '] = '%'.$lastname.'%';
            }

            if(count($conditions)>0)
                $conditions = ['OR' => $conditions];
        }

        
        if($userAltoQiLista){
            $userAltoQiLista = $this->BaseExterna->getUserList($chave, $nome, $email, $cpf);            
          
          foreach ($userAltoQiLista  as &$val) {
                $conditions = ['OR' => []];
                if(!empty($val[2]) && !empty($val[3])){
                    if(!empty($val[3])) $conditions['OR']['MdlUser.email'] = $val[3];
                    if(!empty($val[2])) $conditions['OR']['MdlUserDados.numero'] = $val[2];
                    if(!empty($val[0])) $conditions['OR']['MdlUser.idnumber'] = $val[0];
                    $userCheck = $this->MdlUser->find('all')
                                                ->where($conditions)
                                                ->contain([ 'MdlUserDados' => [ 'fields' => [ 'numero' => 'numero', 'tipousuario' => 'tipousuario','funcionarioqisat' => 'funcionarioqisat']]]);
                    $val[6] = (!is_null($userCheck->first())) ? true : false;
                }else 
                    $val[6] = true;
            }
        }
        
        $mdlUserLista = $this->paginate($this->MdlUser->find('all')
                                                        ->where($conditions)
                                                        ->contain([ 'MdlUserDados' => [ 'fields' => [ 'numero' => 'numero', 'tipousuario' => 'tipousuario','funcionarioqisat' => 'funcionarioqisat']]])
                                                        ->order(['MdlUser.id' =>'DESC']));

        $this->set(compact('mdlUserLista', 'mdlUser', 'userAltoQiLista', 'moodle', 'contaAzul', 'limit'));
        $this->set('_serialize', ['mdlUserLista', 'userAltoQiLista', 'moodle', 'contaAzul', 'limit']);
    }

    public function edit($id = null){

        $this->loadModel('WebService.MdlCidade');
        $this->loadModel('WebService.MdlEstado');
        $this->loadModel('Entidade.EcmAlternativeHost');

        $ecmAlternativeHost =  $this->EcmAlternativeHost->find('list', ['keyField' => 'id','valueField' => 'shortname'])
                                            ->where(['or' => ['id' => 1, 'shortname' => 'AltoQi']])->toArray();
        $cidades = [];
        $listaEstado = $this->MdlEstado->find('all', ['fields' => ['id', 'uf']])->toArray();
        $listaCidadeJson = $this->MdlCidade->find('all', ['fields' => ['id', 'uf', 'nome']])->contain(['MdlEstado'])->orderAsc('MdlEstado.id')->toArray();
    
        $user = $this->MdlUser->get($id,['contain' => ['MdlUserDados', 'MdlUserEndereco', 'MdlRoleAssignments', 'EcmGrupoPermissao']]);
        $listaCidade = $this->MdlCidade->find('list', ['keyField' => 'nome','valueField' => 'nome', 'groupField' => 'mdl_estado.uf'])->contain(['MdlEstado'])->orderAsc('MdlEstado.id')->toArray();
        $showpassword = false;

        if($id && $user){
            if($this->request->is(['post', 'put'])) {

                if(isset($this->request->data['mdl_user_dado']) && empty($this->request->data['mdl_user_dado']['tipo_inscricao_estadual']))
                    $this->request->data['mdl_user_dado']['tipo_inscricao_estadual'] = NULL;


                $user = $this->MdlUser->patchEntity($user, $this->request->data);
                if ($this->MdlUser->save($user)) {
                    $this->Flash->success(__('Dados foram atualizados.'));
                }else{
                    $this->Flash->error(__('Falha para atualizar os Dados!'));

                    if($user->errors()){
                        $error_msg = [];
                        foreach( $user->errors() as $key => $errors){
                            if(is_array($errors)){
                                foreach($errors as $error){
                                    $error_msg[] = $key.':'.$error;
                                }
                            }else{
                                $error_msg[] = $errors;
                            }
                        }

                        if(!empty($error_msg)){
                            $this->Flash->error(
                                __("Favor verificar os erro(s):".implode($error_msg))
                            );
                        }
                    }
                }
                return $this->redirect(['action' => 'edit', $id ]);

            }else{

                $enrols = array_filter($user->get('mdl_role_assignments'), function ($enrol)
                                            {
                                                return in_array($enrol['roleid'], [1,2,3,4,12,14,15,16,17,18,19,20,21,22,23]);
                                            });

                 if(count($user->get('ecm_grupo_permissao'))==0 && count( $enrols )==0 && $user->mdl_user_dado['funcionarioqisat']==0
                    && ( strpos($user->get('email'), '@qisat.com.br') === false &&  strpos($user->get('email'), '@altoqi.com.br') === false)){
                    $showpassword = true; 
                    $aes = new AESPasswordHasher();
                    $user->password = $aes->decrypt($user->password);
                 }

                 array_map(function($uf) use ($listaCidadeJson, &$cidades)  {
                                   
                                $val = [];
                                $filtro = array_filter($listaCidadeJson, function($city) use ($uf) {
                                                                if($city['uf'] == $uf['id'])
                                                                    return true;
                                                        });

                                $val[$uf['uf']] = array_values($filtro);
                                $cidades[] = (object)$val;

                            }, $listaEstado);
            }

            $listaCidadeJson  = json_encode($cidades);
            $listaEstado = $this->MdlEstado->find('list', ['keyField' => 'uf','valueField' => 'nome'])->toArray();
            $this->set(compact('user', 'listaEstado', 'listaCidade', 'listaCidadeJson', 'ecmAlternativeHost', 'showpassword'));
            $this->set('_serialize', ['user', 'listaEstado', 'listaCidade', 'listaCidadeJson','ecmAlternativeHost', 'showpassword']);
        }else{
            $this->Flash->error(__('Sem Usuário!'));
        }

    }
}
